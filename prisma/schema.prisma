generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
  id             String     @id @default(cuid())
  email          String     @unique
  emailVerified DateTime?
  image         String?
  name           String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  primaryChain   String?
  primaryAddress String?
  contacts       contacts[]
  groups         groups[]
  accounts      Account[]
  sessions      Session[]

  @@index([primaryChain])
  @@index([primaryAddress])
  @@index([email])
}

model groups {
  id       String    @id @default(cuid())
  name     String
  users    User[]
  expenses expense[]
  image    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model contacts {
  id                         String   @id @default(cuid())
  nickname                   String?
  user_id                    String
  reference_contact_for_user String
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  user                       User?    @relation(fields: [userId], references: [id])
  userId                     String?

  @@index([id])
}

model expense_member {
  id         String   @id @default(cuid())
  group_id   String
  user_id    String
  amount     Float
  createdAt  DateTime @default(now())
  isPayee    Boolean  @default(false)
  updatedAt  DateTime @updatedAt
  expense    expense? @relation(fields: [expenseId], references: [id])
  expenseId  String?

  @@index([id])
}

model expense {
  id              String           @id @default(cuid())
  group           groups           @relation(fields: [groupId], references: [id])
  groupId         String
  amount          Float
  description     String?
  expense_members expense_member[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([id])
}
